/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GrETHInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "batchBurn"
      | "batchBurnTo"
      | "burn(uint256)"
      | "burn(uint256,address)"
      | "burnTo"
      | "calcShare"
      | "calcShareWeth"
      | "decimals"
      | "execute"
      | "mint()"
      | "mint(address[],uint256[])"
      | "mintTo"
      | "name"
      | "owner"
      | "poolsNFT"
      | "symbol"
      | "totalGrinded"
      | "totalMintedBy"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "weth"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Burn"
      | "CallResult"
      | "Mint"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBurn",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBurnTo",
    values: [BigNumberish[], AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnTo",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calcShare",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calcShareWeth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "mint()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint(address[],uint256[])",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "mintTo", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolsNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalGrinded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMintedBy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchBurnTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burn(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burn(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcShareWeth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolsNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalGrinded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMintedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [
    burner: AddressLike,
    amount: BigNumberish,
    token: AddressLike,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    burner: string,
    amount: bigint,
    token: string,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    burner: string;
    amount: bigint;
    token: string;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallResultEvent {
  export type InputTuple = [result: BytesLike];
  export type OutputTuple = [result: string];
  export interface OutputObject {
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    actors: AddressLike[],
    shares: BigNumberish[],
    minted: BigNumberish
  ];
  export type OutputTuple = [
    actors: string[],
    shares: bigint[],
    minted: bigint
  ];
  export interface OutputObject {
    actors: string[];
    shares: bigint[];
    minted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GrETH extends BaseContract {
  connect(runner?: ContractRunner | null): GrETH;
  waitForDeployment(): Promise<this>;

  interface: GrETHInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  batchBurn: TypedContractMethod<
    [amounts: BigNumberish[], tokens: AddressLike[]],
    [bigint[]],
    "payable"
  >;

  batchBurnTo: TypedContractMethod<
    [amounts: BigNumberish[], tokens: AddressLike[], to: AddressLike],
    [bigint[]],
    "payable"
  >;

  "burn(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "burn(uint256,address)": TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [bigint],
    "payable"
  >;

  burnTo: TypedContractMethod<
    [amount: BigNumberish, token: AddressLike, to: AddressLike],
    [bigint],
    "payable"
  >;

  calcShare: TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;

  calcShareWeth: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  execute: TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;

  "mint()": TypedContractMethod<[], [bigint], "payable">;

  "mint(address[],uint256[])": TypedContractMethod<
    [actors: AddressLike[], amounts: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  mintTo: TypedContractMethod<[receiver: AddressLike], [bigint], "payable">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  poolsNFT: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalGrinded: TypedContractMethod<[], [bigint], "view">;

  totalMintedBy: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  weth: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchBurn"
  ): TypedContractMethod<
    [amounts: BigNumberish[], tokens: AddressLike[]],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "batchBurnTo"
  ): TypedContractMethod<
    [amounts: BigNumberish[], tokens: AddressLike[], to: AddressLike],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "burn(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "burn(uint256,address)"
  ): TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "burnTo"
  ): TypedContractMethod<
    [amount: BigNumberish, token: AddressLike, to: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "calcShare"
  ): TypedContractMethod<
    [amount: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcShareWeth"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint()"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "mint(address[],uint256[])"
  ): TypedContractMethod<
    [actors: AddressLike[], amounts: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintTo"
  ): TypedContractMethod<[receiver: AddressLike], [bigint], "payable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolsNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalGrinded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalMintedBy"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "CallResult"
  ): TypedContractEvent<
    CallResultEvent.InputTuple,
    CallResultEvent.OutputTuple,
    CallResultEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Burn(address,uint256,address,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "CallResult(bytes)": TypedContractEvent<
      CallResultEvent.InputTuple,
      CallResultEvent.OutputTuple,
      CallResultEvent.OutputObject
    >;
    CallResult: TypedContractEvent<
      CallResultEvent.InputTuple,
      CallResultEvent.OutputTuple,
      CallResultEvent.OutputObject
    >;

    "Mint(address[],uint256[],uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
