/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IIntentNFT {
  export type IntentStruct = {
    owner: AddressLike;
    grinds: BigNumberish;
    poolIds: BigNumberish[];
  };

  export type IntentStructOutput = [
    owner: string,
    grinds: bigint,
    poolIds: bigint[]
  ] & { owner: string; grinds: bigint; poolIds: bigint[] };
}

export interface IntentNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "baseURI"
      | "calcPayment"
      | "chainId"
      | "execute"
      | "freemiumGrinds"
      | "fundsReceiver"
      | "getApproved"
      | "getIntent"
      | "getIntentBy"
      | "getIntentOf"
      | "getIntents"
      | "grinds"
      | "grindsOf"
      | "intentIdOf"
      | "isApprovedForAll"
      | "isPaymentToken"
      | "mint"
      | "mintTo"
      | "name"
      | "owner"
      | "ownerOf"
      | "poolsNFT"
      | "ratePerGrind"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setFreemiumGrinds"
      | "setFundsReceiver"
      | "setPoolsNFT"
      | "setRatePerGrind"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalGrinds"
      | "totalIntents"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "Mint"
      | "Pay"
      | "SetRatePerGrind"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calcPayment",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freemiumGrinds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundsReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntentBy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntentOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntents",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grinds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grindsOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "intentIdOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPaymentToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolsNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ratePerGrind",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFreemiumGrinds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundsReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolsNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRatePerGrind",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalGrinds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalIntents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freemiumGrinds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundsReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIntent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIntentBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntentOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIntents", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grinds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grindsOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "intentIdOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolsNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ratePerGrind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFreemiumGrinds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundsReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolsNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRatePerGrind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalGrinds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalIntents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    intentId: BigNumberish,
    to: AddressLike,
    grinds: BigNumberish
  ];
  export type OutputTuple = [intentId: bigint, to: string, grinds: bigint];
  export interface OutputObject {
    intentId: bigint;
    to: string;
    grinds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayEvent {
  export type InputTuple = [
    paymentToken: AddressLike,
    payer: AddressLike,
    paymentAmount: BigNumberish
  ];
  export type OutputTuple = [
    paymentToken: string,
    payer: string,
    paymentAmount: bigint
  ];
  export interface OutputObject {
    paymentToken: string;
    payer: string;
    paymentAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRatePerGrindEvent {
  export type InputTuple = [token: AddressLike, _ratePerGrind: BigNumberish];
  export type OutputTuple = [token: string, _ratePerGrind: bigint];
  export interface OutputObject {
    token: string;
    _ratePerGrind: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IntentNFT extends BaseContract {
  connect(runner?: ContractRunner | null): IntentNFT;
  waitForDeployment(): Promise<this>;

  interface: IntentNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  baseURI: TypedContractMethod<[], [string], "view">;

  calcPayment: TypedContractMethod<
    [paymentToken: AddressLike, _grinds: BigNumberish],
    [bigint],
    "view"
  >;

  chainId: TypedContractMethod<[], [bigint], "view">;

  execute: TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;

  freemiumGrinds: TypedContractMethod<[], [bigint], "view">;

  fundsReceiver: TypedContractMethod<[], [string], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getIntent: TypedContractMethod<
    [intentId: BigNumberish],
    [IIntentNFT.IntentStructOutput],
    "view"
  >;

  getIntentBy: TypedContractMethod<
    [poolId: BigNumberish],
    [
      [string, bigint, bigint[]] & {
        _account: string;
        _grinds: bigint;
        _poolIds: bigint[];
      }
    ],
    "view"
  >;

  getIntentOf: TypedContractMethod<
    [account: AddressLike],
    [
      [string, bigint, bigint[]] & {
        _account: string;
        _grinds: bigint;
        _poolIds: bigint[];
      }
    ],
    "view"
  >;

  getIntents: TypedContractMethod<
    [intentIds: BigNumberish[]],
    [IIntentNFT.IntentStructOutput[]],
    "view"
  >;

  grinds: TypedContractMethod<[intentId: BigNumberish], [bigint], "view">;

  grindsOf: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  intentIdOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isPaymentToken: TypedContractMethod<
    [paymentToken: AddressLike],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<
    [paymentToken: AddressLike, _grinds: BigNumberish],
    [bigint],
    "payable"
  >;

  mintTo: TypedContractMethod<
    [paymentToken: AddressLike, to: AddressLike, _grinds: BigNumberish],
    [bigint],
    "payable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  poolsNFT: TypedContractMethod<[], [string], "view">;

  ratePerGrind: TypedContractMethod<
    [paymentToken: AddressLike],
    [bigint],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[_baseURI: string], [void], "nonpayable">;

  setFreemiumGrinds: TypedContractMethod<
    [_freemiumGrinds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFundsReceiver: TypedContractMethod<
    [_fundsReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setPoolsNFT: TypedContractMethod<
    [_poolsNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  setRatePerGrind: TypedContractMethod<
    [token: AddressLike, _ratePerGrind: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[intentId: BigNumberish], [string], "view">;

  totalGrinds: TypedContractMethod<[], [bigint], "view">;

  totalIntents: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, intentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calcPayment"
  ): TypedContractMethod<
    [paymentToken: AddressLike, _grinds: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "chainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freemiumGrinds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fundsReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getIntent"
  ): TypedContractMethod<
    [intentId: BigNumberish],
    [IIntentNFT.IntentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIntentBy"
  ): TypedContractMethod<
    [poolId: BigNumberish],
    [
      [string, bigint, bigint[]] & {
        _account: string;
        _grinds: bigint;
        _poolIds: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIntentOf"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [string, bigint, bigint[]] & {
        _account: string;
        _grinds: bigint;
        _poolIds: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIntents"
  ): TypedContractMethod<
    [intentIds: BigNumberish[]],
    [IIntentNFT.IntentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grinds"
  ): TypedContractMethod<[intentId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "grindsOf"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "intentIdOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPaymentToken"
  ): TypedContractMethod<[paymentToken: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [paymentToken: AddressLike, _grinds: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintTo"
  ): TypedContractMethod<
    [paymentToken: AddressLike, to: AddressLike, _grinds: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "poolsNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ratePerGrind"
  ): TypedContractMethod<[paymentToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[_baseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFreemiumGrinds"
  ): TypedContractMethod<[_freemiumGrinds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFundsReceiver"
  ): TypedContractMethod<[_fundsReceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPoolsNFT"
  ): TypedContractMethod<[_poolsNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRatePerGrind"
  ): TypedContractMethod<
    [token: AddressLike, _ratePerGrind: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[intentId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalGrinds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalIntents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, intentId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "Pay"
  ): TypedContractEvent<
    PayEvent.InputTuple,
    PayEvent.OutputTuple,
    PayEvent.OutputObject
  >;
  getEvent(
    key: "SetRatePerGrind"
  ): TypedContractEvent<
    SetRatePerGrindEvent.InputTuple,
    SetRatePerGrindEvent.OutputTuple,
    SetRatePerGrindEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Mint(uint256,address,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "Pay(address,address,uint256)": TypedContractEvent<
      PayEvent.InputTuple,
      PayEvent.OutputTuple,
      PayEvent.OutputObject
    >;
    Pay: TypedContractEvent<
      PayEvent.InputTuple,
      PayEvent.OutputTuple,
      PayEvent.OutputObject
    >;

    "SetRatePerGrind(address,uint256)": TypedContractEvent<
      SetRatePerGrindEvent.InputTuple,
      SetRatePerGrindEvent.OutputTuple,
      SetRatePerGrindEvent.OutputObject
    >;
    SetRatePerGrind: TypedContractEvent<
      SetRatePerGrindEvent.InputTuple,
      SetRatePerGrindEvent.OutputTuple,
      SetRatePerGrindEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
