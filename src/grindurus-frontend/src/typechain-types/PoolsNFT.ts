/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IURUS {
  export type PositionStruct = {
    number: BigNumberish;
    numberMax: BigNumberish;
    priceMin: BigNumberish;
    liquidity: BigNumberish;
    qty: BigNumberish;
    price: BigNumberish;
    feeQty: BigNumberish;
    feePrice: BigNumberish;
  };

  export type PositionStructOutput = [
    number: bigint,
    numberMax: bigint,
    priceMin: bigint,
    liquidity: bigint,
    qty: bigint,
    price: bigint,
    feeQty: bigint,
    feePrice: bigint
  ] & {
    number: bigint;
    numberMax: bigint;
    priceMin: bigint;
    liquidity: bigint;
    qty: bigint;
    price: bigint;
    feeQty: bigint;
    feePrice: bigint;
  };

  export type ConfigStruct = {
    longNumberMax: BigNumberish;
    hedgeNumberMax: BigNumberish;
    extraCoef: BigNumberish;
    priceVolatilityPercent: BigNumberish;
    returnPercentLongSell: BigNumberish;
    returnPercentHedgeSell: BigNumberish;
    returnPercentHedgeRebuy: BigNumberish;
  };

  export type ConfigStructOutput = [
    longNumberMax: bigint,
    hedgeNumberMax: bigint,
    extraCoef: bigint,
    priceVolatilityPercent: bigint,
    returnPercentLongSell: bigint,
    returnPercentHedgeSell: bigint,
    returnPercentHedgeRebuy: bigint
  ] & {
    longNumberMax: bigint;
    hedgeNumberMax: bigint;
    extraCoef: bigint;
    priceVolatilityPercent: bigint;
    returnPercentLongSell: bigint;
    returnPercentHedgeSell: bigint;
    returnPercentHedgeRebuy: bigint;
  };

  export type FeeConfigStruct = {
    longSellFeeCoef: BigNumberish;
    hedgeSellFeeCoef: BigNumberish;
    hedgeRebuyFeeCoef: BigNumberish;
  };

  export type FeeConfigStructOutput = [
    longSellFeeCoef: bigint,
    hedgeSellFeeCoef: bigint,
    hedgeRebuyFeeCoef: bigint
  ] & {
    longSellFeeCoef: bigint;
    hedgeSellFeeCoef: bigint;
    hedgeRebuyFeeCoef: bigint;
  };

  export type TotalProfitsStruct = {
    quoteTokenYieldProfit: BigNumberish;
    baseTokenYieldProfit: BigNumberish;
    quoteTokenTradeProfit: BigNumberish;
    baseTokenTradeProfit: BigNumberish;
  };

  export type TotalProfitsStructOutput = [
    quoteTokenYieldProfit: bigint,
    baseTokenYieldProfit: bigint,
    quoteTokenTradeProfit: bigint,
    baseTokenTradeProfit: bigint
  ] & {
    quoteTokenYieldProfit: bigint;
    baseTokenYieldProfit: bigint;
    quoteTokenTradeProfit: bigint;
    baseTokenTradeProfit: bigint;
  };
}

export declare namespace IPoolsNFTLens {
  export type PositionsStruct = {
    long: IURUS.PositionStruct;
    hedge: IURUS.PositionStruct;
  };

  export type PositionsStructOutput = [
    long: IURUS.PositionStructOutput,
    hedge: IURUS.PositionStructOutput
  ] & { long: IURUS.PositionStructOutput; hedge: IURUS.PositionStructOutput };

  export type ROIStruct = {
    ROINumerator: BigNumberish;
    ROIDeniminator: BigNumberish;
    ROIPeriod: BigNumberish;
  };

  export type ROIStructOutput = [
    ROINumerator: bigint,
    ROIDeniminator: bigint,
    ROIPeriod: bigint
  ] & { ROINumerator: bigint; ROIDeniminator: bigint; ROIPeriod: bigint };

  export type ThresholdsStruct = {
    longBuyPriceMin: BigNumberish;
    longSellQuoteTokenAmountThreshold: BigNumberish;
    longSellSwapPriceThreshold: BigNumberish;
    hedgeSellInitPriceThresholdHigh: BigNumberish;
    hedgeSellInitPriceThresholdLow: BigNumberish;
    hedgeSellLiquidity: BigNumberish;
    hedgeSellQuoteTokenAmountThreshold: BigNumberish;
    hedgeSellTargetPrice: BigNumberish;
    hedgeSellSwapPriceThreshold: BigNumberish;
    hedgeRebuyBaseTokenAmountThreshold: BigNumberish;
    hedgeRebuySwapPriceThreshold: BigNumberish;
  };

  export type ThresholdsStructOutput = [
    longBuyPriceMin: bigint,
    longSellQuoteTokenAmountThreshold: bigint,
    longSellSwapPriceThreshold: bigint,
    hedgeSellInitPriceThresholdHigh: bigint,
    hedgeSellInitPriceThresholdLow: bigint,
    hedgeSellLiquidity: bigint,
    hedgeSellQuoteTokenAmountThreshold: bigint,
    hedgeSellTargetPrice: bigint,
    hedgeSellSwapPriceThreshold: bigint,
    hedgeRebuyBaseTokenAmountThreshold: bigint,
    hedgeRebuySwapPriceThreshold: bigint
  ] & {
    longBuyPriceMin: bigint;
    longSellQuoteTokenAmountThreshold: bigint;
    longSellSwapPriceThreshold: bigint;
    hedgeSellInitPriceThresholdHigh: bigint;
    hedgeSellInitPriceThresholdLow: bigint;
    hedgeSellLiquidity: bigint;
    hedgeSellQuoteTokenAmountThreshold: bigint;
    hedgeSellTargetPrice: bigint;
    hedgeSellSwapPriceThreshold: bigint;
    hedgeRebuyBaseTokenAmountThreshold: bigint;
    hedgeRebuySwapPriceThreshold: bigint;
  };

  export type RoyaltyParamsStruct = {
    compensationShare: BigNumberish;
    poolOwnerShare: BigNumberish;
    reserveShare: BigNumberish;
    ownerShare: BigNumberish;
    oldRoyaltyPrice: BigNumberish;
    newRoyaltyPrice: BigNumberish;
  };

  export type RoyaltyParamsStructOutput = [
    compensationShare: bigint,
    poolOwnerShare: bigint,
    reserveShare: bigint,
    ownerShare: bigint,
    oldRoyaltyPrice: bigint,
    newRoyaltyPrice: bigint
  ] & {
    compensationShare: bigint;
    poolOwnerShare: bigint;
    reserveShare: bigint;
    ownerShare: bigint;
    oldRoyaltyPrice: bigint;
    newRoyaltyPrice: bigint;
  };

  export type PoolNFTInfoStruct = {
    poolId: BigNumberish;
    strategyId: BigNumberish;
    pool: AddressLike;
    positions: IPoolsNFTLens.PositionsStruct;
    config: IURUS.ConfigStruct;
    feeConfig: IURUS.FeeConfigStruct;
    oracleQuoteTokenPerBaseToken: AddressLike;
    oracleQuoteTokenPerFeeToken: AddressLike;
    feeToken: AddressLike;
    quoteToken: AddressLike;
    baseToken: AddressLike;
    feeTokenSymbol: string;
    quoteTokenSymbol: string;
    baseTokenSymbol: string;
    oracleQuoteTokenPerBaseTokenDecimals: BigNumberish;
    oracleQuoteTokenPerFeeTokenDecimals: BigNumberish;
    quoteTokenDecimals: BigNumberish;
    baseTokenDecimals: BigNumberish;
    quoteTokenAmount: BigNumberish;
    baseTokenAmount: BigNumberish;
    activeCapital: BigNumberish;
    startTimestamp: BigNumberish;
    totalProfits: IURUS.TotalProfitsStruct;
    roi: IPoolsNFTLens.ROIStruct;
    thresholds: IPoolsNFTLens.ThresholdsStruct;
    royaltyParams: IPoolsNFTLens.RoyaltyParamsStruct;
  };

  export type PoolNFTInfoStructOutput = [
    poolId: bigint,
    strategyId: bigint,
    pool: string,
    positions: IPoolsNFTLens.PositionsStructOutput,
    config: IURUS.ConfigStructOutput,
    feeConfig: IURUS.FeeConfigStructOutput,
    oracleQuoteTokenPerBaseToken: string,
    oracleQuoteTokenPerFeeToken: string,
    feeToken: string,
    quoteToken: string,
    baseToken: string,
    feeTokenSymbol: string,
    quoteTokenSymbol: string,
    baseTokenSymbol: string,
    oracleQuoteTokenPerBaseTokenDecimals: bigint,
    oracleQuoteTokenPerFeeTokenDecimals: bigint,
    quoteTokenDecimals: bigint,
    baseTokenDecimals: bigint,
    quoteTokenAmount: bigint,
    baseTokenAmount: bigint,
    activeCapital: bigint,
    startTimestamp: bigint,
    totalProfits: IURUS.TotalProfitsStructOutput,
    roi: IPoolsNFTLens.ROIStructOutput,
    thresholds: IPoolsNFTLens.ThresholdsStructOutput,
    royaltyParams: IPoolsNFTLens.RoyaltyParamsStructOutput
  ] & {
    poolId: bigint;
    strategyId: bigint;
    pool: string;
    positions: IPoolsNFTLens.PositionsStructOutput;
    config: IURUS.ConfigStructOutput;
    feeConfig: IURUS.FeeConfigStructOutput;
    oracleQuoteTokenPerBaseToken: string;
    oracleQuoteTokenPerFeeToken: string;
    feeToken: string;
    quoteToken: string;
    baseToken: string;
    feeTokenSymbol: string;
    quoteTokenSymbol: string;
    baseTokenSymbol: string;
    oracleQuoteTokenPerBaseTokenDecimals: bigint;
    oracleQuoteTokenPerFeeTokenDecimals: bigint;
    quoteTokenDecimals: bigint;
    baseTokenDecimals: bigint;
    quoteTokenAmount: bigint;
    baseTokenAmount: bigint;
    activeCapital: bigint;
    startTimestamp: bigint;
    totalProfits: IURUS.TotalProfitsStructOutput;
    roi: IPoolsNFTLens.ROIStructOutput;
    thresholds: IPoolsNFTLens.ThresholdsStructOutput;
    royaltyParams: IPoolsNFTLens.RoyaltyParamsStructOutput;
  };
}

export interface PoolsNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DENOMINATOR"
      | "approve"
      | "balanceOf"
      | "baseURI"
      | "buyRoyalty"
      | "buyRoyaltyTo"
      | "calcGRETHShares"
      | "calcRoyaltyPriceShares"
      | "calcRoyaltyShares"
      | "deposit"
      | "dip"
      | "execute"
      | "exit"
      | "getApproved"
      | "getPoolIdsOf"
      | "getPoolNFTInfosBy"
      | "getPositionsBy"
      | "getRoyaltyReceiver"
      | "grETH"
      | "grethGrinderShareNumerator"
      | "grethPoolOwnerShareNumerator"
      | "grethReserveShareNumerator"
      | "grethRoyaltyReceiverShareNumerator"
      | "grind"
      | "grindOp"
      | "grindOpTo"
      | "grindTo"
      | "grinderAI"
      | "init"
      | "isAgentOf"
      | "isApprovedForAll"
      | "isDepositorOf"
      | "isDisapprovedGrinderAI"
      | "isStrategyStopped"
      | "maxDeposit"
      | "minDeposit"
      | "mint"
      | "mintTo"
      | "minter"
      | "name"
      | "owner"
      | "ownerOf"
      | "pendingOwner"
      | "poolIds"
      | "poolOwnerShareNumerator"
      | "pools"
      | "poolsNFTLens"
      | "rebalance"
      | "royaltyInfo"
      | "royaltyNumerator"
      | "royaltyOwnerShareNumerator"
      | "royaltyPrice"
      | "royaltyPriceCompensationShareNumerator"
      | "royaltyPriceInitNumerator"
      | "royaltyPriceOwnerShareNumerator"
      | "royaltyPricePoolOwnerShareNumerator"
      | "royaltyPriceReserveShareNumerator"
      | "royaltyReceiver"
      | "royaltyReceiverShareNumerator"
      | "royaltyReserveShareNumerator"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setAgent"
      | "setApprovalForAll"
      | "setDepositor"
      | "setGRETH"
      | "setGRETHShares"
      | "setGrinderAI"
      | "setMaxDeposit"
      | "setMinDeposit"
      | "setPoolsNFTLens"
      | "setRoyaltyPriceInitNumerator"
      | "setRoyaltyPriceShares"
      | "setRoyaltyShares"
      | "setStrategyFactory"
      | "setStrategyStopped"
      | "strategyFactory"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalPools"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "withdraw"
      | "withdrawTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BuyRoyalty"
      | "Deposit"
      | "Exit"
      | "Grind"
      | "Mint"
      | "Rebalance"
      | "Transfer"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyRoyalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyRoyaltyTo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calcGRETHShares",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calcRoyaltyPriceShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcRoyaltyShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dip",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolIdsOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolNFTInfosBy",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionsBy",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyReceiver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "grETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grethGrinderShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grethPoolOwnerShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grethReserveShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grethRoyaltyReceiverShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "grind", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "grindOp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grindOpTo",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grindTo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "grinderAI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAgentOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositorOf",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisapprovedGrinderAI",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStrategyStopped",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolOwnerShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "poolsNFTLens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyOwnerShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPriceCompensationShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPriceInitNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPriceOwnerShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPricePoolOwnerShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyPriceReserveShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyReceiver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyReceiverShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyReserveShareNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAgent",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositor",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGRETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGRETHShares",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGrinderAI",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDeposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolsNFTLens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyPriceInitNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyPriceShares",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyShares",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyStopped",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyFactory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyRoyalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyRoyaltyTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcGRETHShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcRoyaltyPriceShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcRoyaltyShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolIdsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolNFTInfosBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grethGrinderShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grethPoolOwnerShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grethReserveShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grethRoyaltyReceiverShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grindOp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grindOpTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grindTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grinderAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAgentOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDepositorOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDisapprovedGrinderAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStrategyStopped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolOwnerShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolsNFTLens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyOwnerShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPriceCompensationShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPriceInitNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPriceOwnerShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPricePoolOwnerShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyPriceReserveShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyReceiverShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyReserveShareNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGRETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGRETHShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGrinderAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolsNFTLens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyPriceInitNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyPriceShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyStopped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyRoyaltyEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    buyer: AddressLike,
    paidPrice: BigNumberish
  ];
  export type OutputTuple = [poolId: bigint, buyer: string, paidPrice: bigint];
  export interface OutputObject {
    poolId: bigint;
    buyer: string;
    paidPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    pool: AddressLike,
    quoteToken: AddressLike,
    quoteTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    poolId: bigint,
    pool: string,
    quoteToken: string,
    quoteTokenAmount: bigint
  ];
  export interface OutputObject {
    poolId: bigint;
    pool: string;
    quoteToken: string;
    quoteTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    quoteTokenAmount: BigNumberish,
    baseTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    poolId: bigint,
    quoteTokenAmount: bigint,
    baseTokenAmount: bigint
  ];
  export interface OutputObject {
    poolId: bigint;
    quoteTokenAmount: bigint;
    baseTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrindEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    op: BigNumberish,
    grinder: AddressLike,
    isGrinded: boolean
  ];
  export type OutputTuple = [
    poolId: bigint,
    op: bigint,
    grinder: string,
    isGrinded: boolean
  ];
  export interface OutputObject {
    poolId: bigint;
    op: bigint;
    grinder: string;
    isGrinded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    baseToken: AddressLike,
    quoteToken: AddressLike
  ];
  export type OutputTuple = [
    poolId: bigint,
    baseToken: string,
    quoteToken: string
  ];
  export interface OutputObject {
    poolId: bigint;
    baseToken: string;
    quoteToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceEvent {
  export type InputTuple = [poolId0: BigNumberish, poolId1: BigNumberish];
  export type OutputTuple = [poolId0: bigint, poolId1: bigint];
  export interface OutputObject {
    poolId0: bigint;
    poolId1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    to: AddressLike,
    quoteToken: AddressLike,
    quoteTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    poolId: bigint,
    to: string,
    quoteToken: string,
    quoteTokenAmount: bigint
  ];
  export interface OutputObject {
    poolId: bigint;
    to: string;
    quoteToken: string;
    quoteTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoolsNFT extends BaseContract {
  connect(runner?: ContractRunner | null): PoolsNFT;
  waitForDeployment(): Promise<this>;

  interface: PoolsNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  baseURI: TypedContractMethod<[], [string], "view">;

  buyRoyalty: TypedContractMethod<
    [poolId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  buyRoyaltyTo: TypedContractMethod<
    [poolId: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  calcGRETHShares: TypedContractMethod<
    [poolId: BigNumberish, grethReward: BigNumberish, grinder: AddressLike],
    [[string[], bigint[]] & { actors: string[]; grethShares: bigint[] }],
    "view"
  >;

  calcRoyaltyPriceShares: TypedContractMethod<
    [poolId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        compensationShare: bigint;
        poolOwnerShare: bigint;
        reserveShare: bigint;
        ownerShare: bigint;
        oldRoyaltyPrice: bigint;
        newRoyaltyPrice: bigint;
      }
    ],
    "view"
  >;

  calcRoyaltyShares: TypedContractMethod<
    [poolId: BigNumberish, profit: BigNumberish],
    [[string[], bigint[]] & { receivers: string[]; amounts: bigint[] }],
    "view"
  >;

  deposit: TypedContractMethod<
    [poolId: BigNumberish, quoteTokenAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  dip: TypedContractMethod<
    [poolId: BigNumberish, token: AddressLike, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  execute: TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;

  exit: TypedContractMethod<
    [poolId: BigNumberish],
    [[bigint, bigint] & { quoteTokenAmount: bigint; baseTokenAmount: bigint }],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getPoolIdsOf: TypedContractMethod<
    [poolOwner: AddressLike],
    [bigint[]],
    "view"
  >;

  getPoolNFTInfosBy: TypedContractMethod<
    [_poolIds: BigNumberish[]],
    [IPoolsNFTLens.PoolNFTInfoStructOutput[]],
    "view"
  >;

  getPositionsBy: TypedContractMethod<
    [_poolIds: BigNumberish[]],
    [IPoolsNFTLens.PositionsStructOutput[]],
    "view"
  >;

  getRoyaltyReceiver: TypedContractMethod<
    [poolId: BigNumberish],
    [string],
    "view"
  >;

  grETH: TypedContractMethod<[], [string], "view">;

  grethGrinderShareNumerator: TypedContractMethod<[], [bigint], "view">;

  grethPoolOwnerShareNumerator: TypedContractMethod<[], [bigint], "view">;

  grethReserveShareNumerator: TypedContractMethod<[], [bigint], "view">;

  grethRoyaltyReceiverShareNumerator: TypedContractMethod<[], [bigint], "view">;

  grind: TypedContractMethod<[poolId: BigNumberish], [boolean], "nonpayable">;

  grindOp: TypedContractMethod<
    [poolId: BigNumberish, op: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  grindOpTo: TypedContractMethod<
    [poolId: BigNumberish, op: BigNumberish, grinder: AddressLike],
    [boolean],
    "nonpayable"
  >;

  grindTo: TypedContractMethod<
    [poolId: BigNumberish, grinder: AddressLike],
    [boolean],
    "nonpayable"
  >;

  grinderAI: TypedContractMethod<[], [string], "view">;

  init: TypedContractMethod<
    [_poolsNFTLens: AddressLike, _grETH: AddressLike, _grinderAI: AddressLike],
    [void],
    "nonpayable"
  >;

  isAgentOf: TypedContractMethod<
    [_ownerOf: AddressLike, _agent: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isDepositorOf: TypedContractMethod<
    [poolId: BigNumberish, _depositor: AddressLike],
    [boolean],
    "view"
  >;

  isDisapprovedGrinderAI: TypedContractMethod<
    [_ownerOf: AddressLike],
    [boolean],
    "view"
  >;

  isStrategyStopped: TypedContractMethod<
    [strategyId: BigNumberish],
    [boolean],
    "view"
  >;

  maxDeposit: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  minDeposit: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  mint: TypedContractMethod<
    [
      strategyId: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      quoteTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  mintTo: TypedContractMethod<
    [
      to: AddressLike,
      strategyId: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      quoteTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  minter: TypedContractMethod<[poolId: BigNumberish], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  poolIds: TypedContractMethod<[pool: AddressLike], [bigint], "view">;

  poolOwnerShareNumerator: TypedContractMethod<[], [bigint], "view">;

  pools: TypedContractMethod<[poolId: BigNumberish], [string], "view">;

  poolsNFTLens: TypedContractMethod<[], [string], "view">;

  rebalance: TypedContractMethod<
    [
      poolId0: BigNumberish,
      poolId1: BigNumberish,
      rebalance0: BigNumberish,
      rebalance1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  royaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;

  royaltyNumerator: TypedContractMethod<[], [bigint], "view">;

  royaltyOwnerShareNumerator: TypedContractMethod<[], [bigint], "view">;

  royaltyPrice: TypedContractMethod<[poolId: BigNumberish], [bigint], "view">;

  royaltyPriceCompensationShareNumerator: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  royaltyPriceInitNumerator: TypedContractMethod<[], [bigint], "view">;

  royaltyPriceOwnerShareNumerator: TypedContractMethod<[], [bigint], "view">;

  royaltyPricePoolOwnerShareNumerator: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  royaltyPriceReserveShareNumerator: TypedContractMethod<[], [bigint], "view">;

  royaltyReceiver: TypedContractMethod<
    [poolId: BigNumberish],
    [string],
    "view"
  >;

  royaltyReceiverShareNumerator: TypedContractMethod<[], [bigint], "view">;

  royaltyReserveShareNumerator: TypedContractMethod<[], [bigint], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setAgent: TypedContractMethod<
    [_agent: AddressLike, _agentApproval: boolean],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setDepositor: TypedContractMethod<
    [poolId: BigNumberish, depositor: AddressLike, _depositorApproval: boolean],
    [void],
    "nonpayable"
  >;

  setGRETH: TypedContractMethod<[_grETH: AddressLike], [void], "nonpayable">;

  setGRETHShares: TypedContractMethod<
    [
      _grethGrinderShareNumerator: BigNumberish,
      _grethReserveShareNumerator: BigNumberish,
      _grethPoolOwnerShareNumerator: BigNumberish,
      _grethRoyaltyReceiverShareNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setGrinderAI: TypedContractMethod<
    [_grinderAI: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxDeposit: TypedContractMethod<
    [token: AddressLike, _maxDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinDeposit: TypedContractMethod<
    [token: AddressLike, _minDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPoolsNFTLens: TypedContractMethod<
    [_poolsNFTLens: AddressLike],
    [void],
    "nonpayable"
  >;

  setRoyaltyPriceInitNumerator: TypedContractMethod<
    [_royaltyPriceInitNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRoyaltyPriceShares: TypedContractMethod<
    [
      _royaltyPriceCompensationShareNumerator: BigNumberish,
      _royaltyPriceReserveShareNumerator: BigNumberish,
      _royaltyPricePoolOwnerShareNumerator: BigNumberish,
      _royaltyPriceOwnerShareNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setRoyaltyShares: TypedContractMethod<
    [
      _poolOwnerRoyaltyShareNumerator: BigNumberish,
      _royaltyReceiverShareNumerator: BigNumberish,
      _royaltyReserveShareNumerator: BigNumberish,
      _royaltyOwnerShareNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setStrategyFactory: TypedContractMethod<
    [_strategyFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  setStrategyStopped: TypedContractMethod<
    [strategyId: BigNumberish, _isStrategyStopped: boolean],
    [void],
    "nonpayable"
  >;

  strategyFactory: TypedContractMethod<
    [strategyId: BigNumberish],
    [string],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[poolId: BigNumberish], [string], "view">;

  totalPools: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, poolId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [poolId: BigNumberish, quoteTokenAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawTo: TypedContractMethod<
    [poolId: BigNumberish, to: AddressLike, quoteTokenAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyRoyalty"
  ): TypedContractMethod<[poolId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "buyRoyaltyTo"
  ): TypedContractMethod<
    [poolId: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calcGRETHShares"
  ): TypedContractMethod<
    [poolId: BigNumberish, grethReward: BigNumberish, grinder: AddressLike],
    [[string[], bigint[]] & { actors: string[]; grethShares: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcRoyaltyPriceShares"
  ): TypedContractMethod<
    [poolId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        compensationShare: bigint;
        poolOwnerShare: bigint;
        reserveShare: bigint;
        ownerShare: bigint;
        oldRoyaltyPrice: bigint;
        newRoyaltyPrice: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcRoyaltyShares"
  ): TypedContractMethod<
    [poolId: BigNumberish, profit: BigNumberish],
    [[string[], bigint[]] & { receivers: string[]; amounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [poolId: BigNumberish, quoteTokenAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dip"
  ): TypedContractMethod<
    [poolId: BigNumberish, token: AddressLike, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exit"
  ): TypedContractMethod<
    [poolId: BigNumberish],
    [[bigint, bigint] & { quoteTokenAmount: bigint; baseTokenAmount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPoolIdsOf"
  ): TypedContractMethod<[poolOwner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPoolNFTInfosBy"
  ): TypedContractMethod<
    [_poolIds: BigNumberish[]],
    [IPoolsNFTLens.PoolNFTInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionsBy"
  ): TypedContractMethod<
    [_poolIds: BigNumberish[]],
    [IPoolsNFTLens.PositionsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoyaltyReceiver"
  ): TypedContractMethod<[poolId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "grETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grethGrinderShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grethPoolOwnerShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grethReserveShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grethRoyaltyReceiverShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grind"
  ): TypedContractMethod<[poolId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "grindOp"
  ): TypedContractMethod<
    [poolId: BigNumberish, op: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grindOpTo"
  ): TypedContractMethod<
    [poolId: BigNumberish, op: BigNumberish, grinder: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grindTo"
  ): TypedContractMethod<
    [poolId: BigNumberish, grinder: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grinderAI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [_poolsNFTLens: AddressLike, _grETH: AddressLike, _grinderAI: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAgentOf"
  ): TypedContractMethod<
    [_ownerOf: AddressLike, _agent: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDepositorOf"
  ): TypedContractMethod<
    [poolId: BigNumberish, _depositor: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDisapprovedGrinderAI"
  ): TypedContractMethod<[_ownerOf: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isStrategyStopped"
  ): TypedContractMethod<[strategyId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxDeposit"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDeposit"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      strategyId: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      quoteTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintTo"
  ): TypedContractMethod<
    [
      to: AddressLike,
      strategyId: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      quoteTokenAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minter"
  ): TypedContractMethod<[poolId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolIds"
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolOwnerShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<[poolId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "poolsNFTLens"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [
      poolId0: BigNumberish,
      poolId1: BigNumberish,
      rebalance0: BigNumberish,
      rebalance1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "royaltyNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyOwnerShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyPrice"
  ): TypedContractMethod<[poolId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyPriceCompensationShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyPriceInitNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyPriceOwnerShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyPricePoolOwnerShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyPriceReserveShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyReceiver"
  ): TypedContractMethod<[poolId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "royaltyReceiverShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyReserveShareNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAgent"
  ): TypedContractMethod<
    [_agent: AddressLike, _agentApproval: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDepositor"
  ): TypedContractMethod<
    [poolId: BigNumberish, depositor: AddressLike, _depositorApproval: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGRETH"
  ): TypedContractMethod<[_grETH: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGRETHShares"
  ): TypedContractMethod<
    [
      _grethGrinderShareNumerator: BigNumberish,
      _grethReserveShareNumerator: BigNumberish,
      _grethPoolOwnerShareNumerator: BigNumberish,
      _grethRoyaltyReceiverShareNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGrinderAI"
  ): TypedContractMethod<[_grinderAI: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxDeposit"
  ): TypedContractMethod<
    [token: AddressLike, _maxDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinDeposit"
  ): TypedContractMethod<
    [token: AddressLike, _minDeposit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolsNFTLens"
  ): TypedContractMethod<[_poolsNFTLens: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoyaltyPriceInitNumerator"
  ): TypedContractMethod<
    [_royaltyPriceInitNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoyaltyPriceShares"
  ): TypedContractMethod<
    [
      _royaltyPriceCompensationShareNumerator: BigNumberish,
      _royaltyPriceReserveShareNumerator: BigNumberish,
      _royaltyPricePoolOwnerShareNumerator: BigNumberish,
      _royaltyPriceOwnerShareNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoyaltyShares"
  ): TypedContractMethod<
    [
      _poolOwnerRoyaltyShareNumerator: BigNumberish,
      _royaltyReceiverShareNumerator: BigNumberish,
      _royaltyReserveShareNumerator: BigNumberish,
      _royaltyOwnerShareNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStrategyFactory"
  ): TypedContractMethod<[_strategyFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStrategyStopped"
  ): TypedContractMethod<
    [strategyId: BigNumberish, _isStrategyStopped: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "strategyFactory"
  ): TypedContractMethod<[strategyId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[poolId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalPools"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, poolId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [poolId: BigNumberish, quoteTokenAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<
    [poolId: BigNumberish, to: AddressLike, quoteTokenAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BuyRoyalty"
  ): TypedContractEvent<
    BuyRoyaltyEvent.InputTuple,
    BuyRoyaltyEvent.OutputTuple,
    BuyRoyaltyEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Exit"
  ): TypedContractEvent<
    ExitEvent.InputTuple,
    ExitEvent.OutputTuple,
    ExitEvent.OutputObject
  >;
  getEvent(
    key: "Grind"
  ): TypedContractEvent<
    GrindEvent.InputTuple,
    GrindEvent.OutputTuple,
    GrindEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "Rebalance"
  ): TypedContractEvent<
    RebalanceEvent.InputTuple,
    RebalanceEvent.OutputTuple,
    RebalanceEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BuyRoyalty(uint256,address,uint256)": TypedContractEvent<
      BuyRoyaltyEvent.InputTuple,
      BuyRoyaltyEvent.OutputTuple,
      BuyRoyaltyEvent.OutputObject
    >;
    BuyRoyalty: TypedContractEvent<
      BuyRoyaltyEvent.InputTuple,
      BuyRoyaltyEvent.OutputTuple,
      BuyRoyaltyEvent.OutputObject
    >;

    "Deposit(uint256,address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Exit(uint256,uint256,uint256)": TypedContractEvent<
      ExitEvent.InputTuple,
      ExitEvent.OutputTuple,
      ExitEvent.OutputObject
    >;
    Exit: TypedContractEvent<
      ExitEvent.InputTuple,
      ExitEvent.OutputTuple,
      ExitEvent.OutputObject
    >;

    "Grind(uint256,uint8,address,bool)": TypedContractEvent<
      GrindEvent.InputTuple,
      GrindEvent.OutputTuple,
      GrindEvent.OutputObject
    >;
    Grind: TypedContractEvent<
      GrindEvent.InputTuple,
      GrindEvent.OutputTuple,
      GrindEvent.OutputObject
    >;

    "Mint(uint256,address,address)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "Rebalance(uint256,uint256)": TypedContractEvent<
      RebalanceEvent.InputTuple,
      RebalanceEvent.OutputTuple,
      RebalanceEvent.OutputObject
    >;
    Rebalance: TypedContractEvent<
      RebalanceEvent.InputTuple,
      RebalanceEvent.OutputTuple,
      RebalanceEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdraw(uint256,address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
